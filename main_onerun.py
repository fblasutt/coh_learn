#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
aCreated on Tue Sep 17 19:14:08 2019
 
@author: Egor Kozlov
"""
 
 
 
 
 
if __name__ == '__main__':
     
    try:
        from IPython import get_ipython
        get_ipython().magic('reset -f')
    except:
        pass
 
 
from platform import system
     
import os
if system() != 'Darwin' and system() != 'Windows':      
    os.environ['QT_QPA_PLATFORM']='offscreen'
    
if system() == 'Darwin':
    os.environ["PATH"] += os.pathsep + '/Library/TeX/texbin/'
   

import numpy as np
from residuals import mdl_resid
from data_moments3 import dat_moments
 
print('Hi!')
 
 
 
 
if __name__ == '__main__':
     
     
    #import warnings
    #warnings.filterwarnings("error")
    #For graphs later
    graphs=True
    #Build  data moments and pickle them
    #dat_moments(period=1,sampling_number=2,weighting=True,transform=1)
    
         
    #Initialize the file with parameters
    
    

    #Second
    #x0 = np.array([0.0,   0.06565744,  1.5,  0.2904853,   0.7371481,  0.018159483 - 0.6, -0.091977, 0.805955,0.1])
    #x0 = np.array([1.10511688 , 0.10725931,  3.6224206,   0.44856022 , 0.0472732 ,  0.02879032, -0.09039855,  1.23986084 , 0.10953983])
    x0 = np.array([0.3 , 0.04725931*2.996194651745017, 10/2.996194651745017,   0.25, 1.1 ,  0.0075-0.0, -0.09039855,  1.13986084 , 0.30953983*2.996194651745017])

    #1 1
    x0 = np.array([0.321094,0.167578,3.69922,0.214648,1.14922,0.00989453,-0.0951172,1.11156,0.959375])
    
    #1 2
    x0 = np.array([0.251807,0.228589,4.37695,0.183325,1.10332,0.00648584,-0.0843213,1.12707,0.395508])
    
    #Wisdom
    x0 = np.array([0.287148,0.43265,4.43904,0.197515,1.1088,0.0067326,-0.084137,1.1219,1.532568])
    x0 = np.array([0.44474121,  0.32749023,  7.0759082,   0.2302002,   1.09989648,  0.00966553,-0.06185889,  1.1963916,   1.37988281])
    x0 = np.array([0.44474121,  0.42749023*1.2,  27.0759082,   0.2302002,   0.003989648,  0.0,-0.06185889,  1.1963916,   0.77988281*1.2])
    x0 = np.array([0.44474121,  0.42749023*1.2,  0.0759082,   0.2302002,   0.000001,  0.0,-0.06185889,  1.1963916,   0.77988281*1.2])   
    x0 = np.array([0.8296875,   0.238125,    0.79570312,  0.59226563,  0.36492187,  0.01349219, -0.08658594,  1.03046875,  0.2703125])   
    x0 = np.array([0.23673339843750002, 0.19666015625,0.21979980468750004,0.4838623046875,0.1846240234375, -0.12382861328125,1.0734130859375,0.40615234375000003])
   
    #New way
    x0 = np.array([0.75822509765625,0.030224609375, 0.40762451171875,0.48373779296875, 0.45178955078125,-0.077394775390625,1.30259521484375, 0.32880859375000004])
    x0 = np.array([0.75822509765625,0.030224609375, 0.40762451171875,0.48373779296875, 0.15178955078125,-0.1177394775390625,1.0259521484375, 0.32880859375000004])
    x0 = np.array([0.40019165039062504,0.29312988281249996,0.9469348144531251, 0.889136962890625,0.08512316894531251,-0.00464412841796875, -0.0414232177734375,1.034232177734375, 0.5877197265625])   
    
    
    

    #Envolop
    #x0 = np.array([0.505842,0.328506,0.378367,0.477761,0.056823,-0.0074071,-0.0451931,0.943567,0.417432])

    #x0 = np.array([0.788213,0.537617,0.508721,0.193252,0.14578,-0.0258829,-0.048083,1.07827,0.607617])    

    #x0 = np.array([0.594072,0.61668,0.283018,0.213174,0.141116,-0.0163056,-0.109966,1.05679,0.95918])
    
    x0 = np.array([0.341689,0.325586,0.328994,0.60165,0.0190732,-0.00450908,-0.071376,0.883936,0.455273])


    #Local mimimizer
    #x0 = np.array([0.62137078,  0.28477307,  0.95136571,  0.43995757,  0.12810155, -0.01046587, -0.06743287,  1.00750209,  0.46041764])
    
    #x0 = np.array([ 0.35757217,0.27315025,0.99360676,0.39012968,0.14677543,-0.004208126,-0.04573717,1.0229298,0.42787423])
    
    #x0 = np.array([ 0.61923624,0.27795393,0.80388534,0.4729621,0.098108704,-0.009852369,-0.12677989,1.0054418,0.55442649])
    
    x0 = np.array([    0.51368963,0.30499866,0.73090734,0.50559526,0.00000000000000026139676,-0.0072579687,-0.068374362,0.91598437,0.44187723])
    
     #x0 = np.array([0.62137078,  0.28477307,  0.95136571,  0.43995757,  0.12810155, -0.01046587, -0.06743287,  1.00750209,  0.46041764])

    x0 = np.array([0.7607666015625, 0.30711669921875, 1.0903320312499998, 0.48647705078125, 0.269822021484375, -0.0242556396484375,-0.14070556640624998, 1.06548583984375, 0.5080810546875])
    
    x0 = np.array([0.7607666015625, 0.30711669921875*1.3, 0.11503320312499998,  0.139822021484375, -0.01942556396484375,-0.09070556640624998, 1.043548583984375, 0.9080810546875*1.3])

    ########################
    #A Good one from envelop
    ##########################
    x0 = np.array([0.134814453125,0.3867431640625*1.1, 0.1560107421875, 0.3401025390625,0.0,-0.0328173828125,0.9808105468749999,0.688671875*1.1])
    #x0 = np.array([0.634814453125,0.2867431640625*1.5, 0.0960107421875, 0.09401025390625,-0.0012556982421875,-0.1328173828125,0.9808105468749999,0.688671875*1.5])

    #x0 = np.array([ 0.58955078,  0.26713867,  0.1909082 ,  0.08440527, -0.00552256, -0.14674805 , 0.99384766,  0.52421875])
    x0 = np.array([0.40532226562499996, 0.060185546875*1.4,0.147890625,  1.1058984375,-0.0277397460937499998,-0.218591796875000002, 2.7839257812500002, 0.9919921875*1.4])
    x0 = np.array([0.95532226562499996, 0.020185546875*1.4,2.147890625,  0.0001058984375,-3.577397460937499998,-0.218591796875000002, 2.7839257812500002, 0.9919921875*1.4])
    x0 = np.array([0.92532226562499996, 0.020185546875*1.1,2.147890625,  0.0001058984375,-3.577397460937499998,-0.218591796875000002, 2.7839257812500002, 0.9919921875*1.1])
    x0 = np.array([0.84532226562499996, 0.020185546875*1.1,0.547890625,  1.8058984375,-0.307397460937499998,-0.0218591796875000002, 2.7839257812500002, 0.9919921875*1.1])
    x0 = np.array([0.54532226562499996, 0.020185546875*1.1,1.547890625,  0.3058984375,-0.407397460937499998,-0.218591796875000002, 2.7839257812500002, 0.9919921875*1.1])
    #x0 = np.array([0.94532226562499996, 0.080185546875*1.1,0.8547890625,  0.1158984375,-2.47397460937499998,-0.118591796875000002, 3.5, 0.9919921875*1.1])
    
    x0 = np.array([0.054532226562499996, 0.0,0.30547890625,  0.0418984375,-0.2,-0.15, 0.75,0.9])
    x0 = np.array([0.054532226562499996, 0.0,0.30547890625,  150.0,-0.55,-0.25, 1.8,1.2])
    x0 = np.array([0.054532226562499996, 0.0,0.30547890625,  0.0418984375,-0.4,-0.25, 0.75,1.2])
    x0 = np.array([0.154532226562499996, 0.0,0.30547890625,  0.0118984375,-0.2,-0.25, 0.75,1.0])
    x0 = np.array([0.454532226562499996, 0.0,0.30547890625,  0.0118984375,0.0,-0.25, 0.75,1.0])
    x0 = np.array([0.4054532226562499996, 0.0,0.30547890625,  0.1,0.0,-0.25, 1.5,1.3])
    x0 = np.array([0.2054532226562499996, 0.0,0.2550547890625,  19.1,0.0,-0.15, 1.5,1.4])
    x0 = np.array([0.4054532226562499996, 0.0,0.30547890625,  0.1,0.0,-0.25, 1.5,1.3])
    
    
    ############
    #FLS 0.75
    #################
    
    #Kind of work
    x0 = np.array([0.3054532226562499996, 0.0,0.40547890625,  0.0918984375,0.0,-0.15, 0.75,1.3])
    x0 = np.array([0.3054532226562499996, 0.0,0.40547890625,  0.0918984375,0.0,-0.15, 0.75,1.3])

    #Not really nice
    #x0 = np.array([0.2054532226562499996, 0.0,0.3550547890625,  19.1,0.0,-0.15, 1.5,1.4])

    #No good    
    #x0 = np.array([0.404532226562499996, 0.0,0.2547890625,  16060250.0,-0.6,-0.15, 3.2,1.6])
   
   
    
    ##########à
    #FLS 1.0  
    #############
    
    #No very good
    #x0 = np.array([0.3054532226562499996, 0.0,0.305547890625,  0.0138984375,0.0,-0.25, 0.75,1.3])
    
    #Good bu work better with more nodes for income
    #x0 = np.array([0.4054532226562499996, 0.0,0.30547890625,  0.1,0.0,-0.15, 1.5,1.3])
    #x0 = np.array([0.1054532226562499996, 0.0,0.405547890625,  0.1,0.0,-0.15, 1.5,1.3])
    
    #x0 = np.array([0.2054532226562499996, 0.0,0.30547890625,  0.7,-0.0,-0.055, 3.2,1.3])
   
   
    #Name and location of files
    if system() == 'Windows':   
        path='D:/blasutto/store_model'
    else:
        path='D:/blasutto/store_model'
    
    out, mdl, agents, res = mdl_resid(x0,return_format=['distance','models','agents','scaled residuals'],
                                      #load_from=['mdl_save_bil_le.pkl'],#'mdl_save_uni.pkl'],
                                      solve_transition=False,                                    
                                      #save_to=['mdl_save_bil_le.pkl'],#'mdl_save_uni.pkl'],
                                      store_path=path,
                                      verbose=True,calibration_report=False,draw=graphs,graphs=graphs,
                                      welf=False) #Switch to true for decomposition of welfare analysis
                         
    print('Done. Residual in point x0 is {}'.format(out))
     
    #assert False
    
    #Indexes for the graphs
    if graphs:
        ai=0
        zfi=3
        zmi=3
        psii=0
        ti=11
        thi=5
        dd=0
        edu=['e','e']
         
        #Actual Graphs
        mdl[0].graph(ai,zfi,zmi,psii,ti,thi,dd,edu)
        #get_ipython().magic('reset -f')
        #If you plan to use graphs only once, deselect below to save space on disk
        #os.remove('name_model.pkl')
     
     
  
    
    
        
